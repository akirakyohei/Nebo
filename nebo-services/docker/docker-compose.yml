version: "2.1"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # Required. Kafka will publish this address to ZooKeeper so clients know
      # how to get in touch with Kafka. "PLAINTEXT" indicates that no authentication
      # mechanism will be used.
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      # Required. Instructs Kafka how to get in touch with ZooKeeper.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # Required when running in a single-node cluster, as we are. We would be able to take the default if we had
      # three or more nodes in the cluster.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_JMX_PORT: 9101
      # KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
  kafka-connect:
    image: debezium/connect:1.9
    hostname: kafka-connect
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: kafka-connect-configs
      OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      STATUS_STORAGE_TOPIC: kafka-connect-statuses
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_TOPIC_CREATION_ENABLE: true
      CONNECT_TOPIC_CREATION_DEFAULT_REPLICATION_FACTOR: "3"
      CONNECT_TOPIC_CREATION_DEFAULT_PARTITIONS: "10"
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka
      - mariadb
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:4.1.0
  #   hostname: kafka-connect
  #   container_name: kafka-connect
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     # Required.
  #     # The list of Kafka brokers to connect to. This is only used for bootstrapping,
  #     # the addresses provided here are used to initially connect to the cluster,
  #     # after which the cluster can dynamically change. Thanks, ZooKeeper!
  #     CONNECT_BOOTSTRAP_SERVERS: kafka:9092
  #     # Required. A unique string that identifies the Connect cluster group this worker belongs to.
  #     CONNECT_GROUP_ID: compose-connect-group
  #     # Connect will actually use Kafka topics as a datastore for configuration and other data. #meta
  #     # Required. The name of the topic where connector and task configuration data are stored.
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     # Required. The name of the topic where connector and task configuration offsets are stored.
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     # Required. The name of the topic where connector and task configuration status updates are stored.
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     # Required. Converter class for key Connect data. This controls the format of the
  #     # data that will be written to Kafka for source connectors or read from Kafka for sink connectors.
  #     CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     # Allows connect to leverage the power of schema registry. Here we define it for key schemas.
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     # Required. Converter class for value Connect data. This controls the format of the
  #     # data that will be written to Kafka for source connectors or read from Kafka for sink connectors.
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     # Allows connect to leverage the power of schema registry. Here we define it for value schemas.
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     # Required. Converter class for internal key Connect data that implements the Converter interface.
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     # Required. Converter class for offset value Connect data that implements the Converter interface.
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     # Required. The hostname that will be given out to other workers to connect to.
  #     CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
  #     # The next three are required when running in a single-node cluster, as we are.
  #     # We would be able to take the default (of 3) if we had three or more nodes in the cluster.
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
  #   # kafka-connect relies upon Kafka and ZooKeeper.
  #   # This will instruct docker to wait until those services are up
  #   # before attempting to start kafka-connect.
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - mariadb
  mariadb:
    image: mariadb:lts-jammy
    hostname: mariadb
    container_name: mariadb
    ports:
      - "3306:3306"
    environment:
      MARIADB_ROOT_PASSWORD: "ajdhjewjhredbdbbd"
    command:
      - --log-bin
      - --binlog-format=MIXED
  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    ports:
      - "8081:8081"
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
    restart: on-failure
  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.4.0
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_REST_LISTENERS: "http://rest-proxy:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    restart: on-failure
  # kafka-topics-ui:
  #   image: landoop/kafka-topics-ui:0.9.4
  #   ports:
  #     - "8001:8000"
  #   hostname: kafka-topics-ui
  #   container_name: kafka-topics-ui
  #   depends_on:
  #     - rest-proxy
  #   environment:
  #     KAFKA_REST_PROXY_URL: "http://rest-proxy:8082"
  #     PROXY: "true"
  #   restart: on-failure
  # kafka-connect-ui:
  #   image: landoop/kafka-connect-ui:0.9.7
  #   container_name: kafka-connect-ui
  #   hostname: kafka-connect-ui
  #   ports:
  #     - "8002:8002"
  #   depends_on:
  #     - kafka-connect
  #   environment:
  #     CONNECT_URL: http://kafka-connect:8083
  #     # PROXY: "true"
  #   restart: on-failure
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    hostname: kafka-connect-ui
    container_name: kafka-topics-ui
    # kafka-connect-ui binds to port 8000, but we are going to expose it on our local
    # machine on port 8002.
    ports:
      - "8002:8002"
    environment:
      # Required. Instructs the UI where it can find Kafka Connect.
      CONNECT_URL: http://kafka-connect:8083;dev cluster
      # This instructs the docker image to use Caddy to proxy traffic to kafka-connect-ui.
      PROXY: "true"
    # kafka-connect-ui relies upon Kafka Connect.
    # This will instruct docker to wait until those services are up
    # before attempting to start kafka-connect-ui.
    depends_on:
      - kafka-connect

  debezium-ui:
    image: debezium/debezium-ui:1.9
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      - kafka-connect
      # condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CONNECT_URIS: http://kafka-connect:8083
    restart: on-failure
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "15672:15672"
    environment:
      - RABBITMQ_ERLANG_COOKIE=cluster_cookie
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
